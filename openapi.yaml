openapi: 3.0.3
info:
  title: LiveTable API Server
  description: |
    API server for LiveTable application that provides YouTube live stream management functionality.
    This API handles user authentication, channel subscriptions, and video/stream data.
  version: 0.0.0
  contact:
    name: LiveTable API Support
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.livetable.hirog.f5.si/api
    description: Production server

security:
  - BearerAuth: []

paths:
  /users:
    get:
      operationId: findUser
      summary: Find user
      description: Retrieve user information by email or UUID
      parameters:
        - name: email
          in: query
          required: false
          schema:
            type: string
            format: email
          example: user@example.com
          description: Search by email address
        - name: uuid
          in: query
          required: false
          schema:
            type: string
            format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
          description: Search by UUID
        - name: include_data
          in: query
          required: false
          schema:
            type: boolean
            default: false
          description: Include related data (subscriptions, videos)
      responses:
        "200":
          description: User found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"

  /users/{uuid}/profile:
    get:
      operationId: getUserProfile
      summary: Get user profile
      description: Retrieve user profile information from OAuth providers
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
      responses:
        "200":
          description: User profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoogleUserResponse"
        "404":
          $ref: "#/components/responses/NotFound"

  /users/{uuid}/subscriptions:
    get:
      operationId: getUserSubscriptions
      summary: Get user subscriptions
      description: Retrieve all channel subscriptions for a user
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
      responses:
        "200":
          description: User subscriptions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubscriptionsResponse"
        "404":
          $ref: "#/components/responses/NotFound"

  /channels/{channelId}:
    get:
      operationId: getChannelById
      summary: Get channel by ID
      description: Retrieve channel information by channel ID
      parameters:
        - name: channelId
          in: path
          required: true
          schema:
            type: string
          example: UC_vMYWcDjmfdpH6r4TTn1MQ
      responses:
        "200":
          description: Channel found
          content:
            application/json:
              schema:
                type: object
                properties:
                  channel:
                    $ref: "#/components/schemas/Channel"
        "404":
          $ref: "#/components/responses/NotFound"

  /channels:
    get:
      operationId: getChannels
      summary: Get channels
      description: Retrieve single or multiple channels by IDs
      parameters:
        - name: ids
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
          style: form
          explode: false
          example: "UC_vMYWcDjmfdpH6r4TTn1MQ,UC0TXe_LYZ4scaW2XMyi5_kw"
          description: Comma-separated channel IDs
      responses:
        "200":
          description: Channels found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelsResponse"
        "400":
          $ref: "#/components/responses/BadRequest"

  /channels/{channelId}/videos:
    get:
      operationId: getChannelVideos
      summary: Get channel videos
      description: Retrieve all videos for a specific channel
      parameters:
        - name: channelId
          in: path
          required: true
          schema:
            type: string
          example: UC_vMYWcDjmfdpH6r4TTn1MQ
      responses:
        "200":
          description: Videos found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VideosResponse"
        "404":
          $ref: "#/components/responses/NotFound"

  /videos:
    get:
      operationId: getVideos
      summary: Get videos
      description: Retrieve videos with filtering options
      parameters:
        - name: channels
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
          style: form
          explode: false
          example: "UC_vMYWcDjmfdpH6r4TTn1MQ,UC0TXe_LYZ4scaW2XMyi5_kw"
          description: Comma-separated channel IDs
        - name: status
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
              enum: [live, upcoming, completed, none]
          style: form
          explode: false
          example: "live,upcoming"
          description: Video status filter
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 50
            maximum: 100
          description: Maximum number of results
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            default: 0
          description: Offset for pagination
      responses:
        "200":
          description: Videos matching filters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VideosResponse"
        "400":
          $ref: "#/components/responses/BadRequest"

  /videos/{videoId}:
    get:
      operationId: getVideoById
      summary: Get video by ID
      description: Retrieve video information by video ID
      parameters:
        - name: videoId
          in: path
          required: true
          schema:
            type: string
          example: 7K5lUvMrjik
      responses:
        "200":
          description: Video found
          content:
            application/json:
              schema:
                type: object
                properties:
                  video:
                    $ref: "#/components/schemas/Video"
        "404":
          $ref: "#/components/responses/NotFound"

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from NextAuth authentication

  responses:
    BadRequest:
      description: Invalid parameters
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: "Bad Request"
              error:
                type: string
                example: "Invalid parameters"
            required:
              - success
              - error

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: "Not Found"
              error:
                type: string
                example: "Resource not found"
            required:
              - success
              - error

  schemas:
    ApiResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Operation successful"
      required:
        - success

    User:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        email:
          type: string
          format: email
          example: user@example.com
        name:
          type: string
          nullable: true
          example: "John Doe"
      required:
        - uuid
        - email

    GoogleUser:
      allOf:
        - $ref: "#/components/schemas/User"
        - type: object
          properties:
            refreshToken:
              type: string
              nullable: true
              description: Google OAuth refresh token
            accessToken:
              type: string
              nullable: true
              description: Google OAuth access token
            thumbnail:
              type: string
              nullable: true
              format: uri
              example: "https://lh3.googleusercontent.com/a/example"

    Subscription:
      type: object
      properties:
        userId:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        channelId:
          type: string
          example: UC_vMYWcDjmfdpH6r4TTn1MQ
      required:
        - userId
        - channelId

    Channel:
      type: object
      properties:
        channelId:
          type: string
          example: UC_vMYWcDjmfdpH6r4TTn1MQ
        channelName:
          type: string
          nullable: true
          example: "Iroha ch. 風真いろは - holoX -"
        handle:
          type: string
          nullable: true
          example: "@kazamairohach"
        thumbnail:
          type: string
          nullable: true
          format: uri
          example: "https://yt3.ggpht.com/example=s88-c-k-c0x00ffffff-no-rj"
      required:
        - channelId

    Video:
      type: object
      properties:
        videoId:
          type: string
          example: 7K5lUvMrjik
        channelId:
          type: string
          example: UC0TXe_LYZ4scaW2XMyi5_kw
        title:
          type: string
          nullable: true
          example: "【111万人耐久歌枠】1,111,111人目指して歌う！"
        description:
          type: string
          nullable: true
          example: "1,111,111人の瞬間を皆と迎えたい！"
        url:
          type: string
          nullable: true
          format: uri
          example: "https://www.youtube.com/watch?v=7K5lUvMrjik"
        thumbnail:
          type: string
          nullable: true
          format: uri
          example: "https://i4.ytimg.com/vi/7K5lUvMrjik/hqdefault.jpg"
        startAt:
          type: string
          nullable: true
          format: date-time
          example: "2024-10-09T10:02:02.000Z"
        endAt:
          type: string
          nullable: true
          format: date-time
          example: "2024-10-09T12:02:02.000Z"
        liveStatus:
          type: string
          nullable: true
          enum: ["live", "upcoming", "completed", "none"]
          example: "live"
      required:
        - videoId
        - channelId

    GoogleUserResponse:
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/GoogleUser"

    SubscriptionsResponse:
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/Subscription"

    ChannelsResponse:
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/Channel"

    VideosResponse:
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/Video"

    UserWithDataResponse:
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              type: object
              properties:
                user:
                  $ref: "#/components/schemas/GoogleUser"
                  nullable: true
                subscriptions:
                  type: array
                  items:
                    $ref: "#/components/schemas/Subscription"
                channels:
                  type: array
                  items:
                    $ref: "#/components/schemas/Channel"
                videos:
                  type: array
                  items:
                    $ref: "#/components/schemas/Video"
              required:
                - user
                - subscriptions
                - channels
                - videos
